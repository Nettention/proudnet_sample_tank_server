




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

namespace Tank
{
	internal class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool SendMoveDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float posX, float posY, float direction);  
		public SendMoveDelegate SendMove = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float posX, float posY, float direction)
		{ 
			return false;
		};
		public delegate bool SendFireDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int shooterId, float direction, float launchForce, float fireX, float fireY, float fireZ);  
		public SendFireDelegate SendFire = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int shooterId, float direction, float launchForce, float fireX, float fireY, float fireZ)
		{ 
			return false;
		};
		public delegate bool SendTankTypeDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int tankType);  
		public SendTankTypeDelegate SendTankType = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int tankType)
		{ 
			return false;
		};
		public delegate bool SendTankHealthUpdatedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float currentHealth, float maxHealth);  
		public SendTankHealthUpdatedDelegate SendTankHealthUpdated = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float currentHealth, float maxHealth)
		{ 
			return false;
		};
		public delegate bool SendTankDestroyedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int destroyedById);  
		public SendTankDestroyedDelegate SendTankDestroyed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int destroyedById)
		{ 
			return false;
		};
		public delegate bool SendTankSpawnedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float posX, float posY, float direction, int tankType, float initialHealth);  
		public SendTankSpawnedDelegate SendTankSpawned = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float posX, float posY, float direction, int tankType, float initialHealth)
		{ 
			return false;
		};
		public delegate bool OnPlayerJoinedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, float posX, float posY, int tankType);  
		public OnPlayerJoinedDelegate OnPlayerJoined = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, float posX, float posY, int tankType)
		{ 
			return false;
		};
		public delegate bool OnPlayerLeftDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId);  
		public OnPlayerLeftDelegate OnPlayerLeft = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId)
		{ 
			return false;
		};
		public delegate bool OnTankPositionUpdatedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, float posX, float posY, float direction);  
		public OnTankPositionUpdatedDelegate OnTankPositionUpdated = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, float posX, float posY, float direction)
		{ 
			return false;
		};
		public delegate bool OnTankHealthUpdatedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, float currentHealth, float maxHealth);  
		public OnTankHealthUpdatedDelegate OnTankHealthUpdated = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, float currentHealth, float maxHealth)
		{ 
			return false;
		};
		public delegate bool OnTankDestroyedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, int destroyedById);  
		public OnTankDestroyedDelegate OnTankDestroyed = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, int destroyedById)
		{ 
			return false;
		};
		public delegate bool OnTankSpawnedDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, float posX, float posY, float direction, int tankType, float initialHealth);  
		public OnTankSpawnedDelegate OnTankSpawned = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, float posX, float posY, float direction, int tankType, float initialHealth)
		{ 
			return false;
		};
		public delegate bool OnSpawnBulletDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, int shooterId, float posX, float posY, float direction, float launchForce, float fireX, float fireY, float fireZ);  
		public OnSpawnBulletDelegate OnSpawnBullet = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, int shooterId, float posX, float posY, float direction, float launchForce, float fireX, float fireY, float fireZ)
		{ 
			return false;
		};
		public delegate bool P2PMessageDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String message);  
		public P2PMessageDelegate P2PMessage = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String message)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.SendMove:
            ProcessReceivedMessage_SendMove(__msg, pa, hostTag, remote);
            break;
        case Common.SendFire:
            ProcessReceivedMessage_SendFire(__msg, pa, hostTag, remote);
            break;
        case Common.SendTankType:
            ProcessReceivedMessage_SendTankType(__msg, pa, hostTag, remote);
            break;
        case Common.SendTankHealthUpdated:
            ProcessReceivedMessage_SendTankHealthUpdated(__msg, pa, hostTag, remote);
            break;
        case Common.SendTankDestroyed:
            ProcessReceivedMessage_SendTankDestroyed(__msg, pa, hostTag, remote);
            break;
        case Common.SendTankSpawned:
            ProcessReceivedMessage_SendTankSpawned(__msg, pa, hostTag, remote);
            break;
        case Common.OnPlayerJoined:
            ProcessReceivedMessage_OnPlayerJoined(__msg, pa, hostTag, remote);
            break;
        case Common.OnPlayerLeft:
            ProcessReceivedMessage_OnPlayerLeft(__msg, pa, hostTag, remote);
            break;
        case Common.OnTankPositionUpdated:
            ProcessReceivedMessage_OnTankPositionUpdated(__msg, pa, hostTag, remote);
            break;
        case Common.OnTankHealthUpdated:
            ProcessReceivedMessage_OnTankHealthUpdated(__msg, pa, hostTag, remote);
            break;
        case Common.OnTankDestroyed:
            ProcessReceivedMessage_OnTankDestroyed(__msg, pa, hostTag, remote);
            break;
        case Common.OnTankSpawned:
            ProcessReceivedMessage_OnTankSpawned(__msg, pa, hostTag, remote);
            break;
        case Common.OnSpawnBullet:
            ProcessReceivedMessage_OnSpawnBullet(__msg, pa, hostTag, remote);
            break;
        case Common.P2PMessage:
            ProcessReceivedMessage_P2PMessage(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_SendMove(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        float posX; Nettention.Proud.Marshaler.Read(__msg,out posX);	
float posY; Nettention.Proud.Marshaler.Read(__msg,out posY);	
float direction; Nettention.Proud.Marshaler.Read(__msg,out direction);	
core.PostCheckReadMessage(__msg, RmiName_SendMove);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=posX.ToString()+",";
parameterString+=posY.ToString()+",";
parameterString+=direction.ToString()+",";
        NotifyCallFromStub(Common.SendMove, RmiName_SendMove,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SendMove;
        summary.rmiName = RmiName_SendMove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SendMove (remote,ctx , posX, posY, direction );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SendMove);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SendMove;
        summary.rmiName = RmiName_SendMove;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SendFire(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int shooterId; Nettention.Proud.Marshaler.Read(__msg,out shooterId);	
float direction; Nettention.Proud.Marshaler.Read(__msg,out direction);	
float launchForce; Nettention.Proud.Marshaler.Read(__msg,out launchForce);	
float fireX; Nettention.Proud.Marshaler.Read(__msg,out fireX);	
float fireY; Nettention.Proud.Marshaler.Read(__msg,out fireY);	
float fireZ; Nettention.Proud.Marshaler.Read(__msg,out fireZ);	
core.PostCheckReadMessage(__msg, RmiName_SendFire);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=shooterId.ToString()+",";
parameterString+=direction.ToString()+",";
parameterString+=launchForce.ToString()+",";
parameterString+=fireX.ToString()+",";
parameterString+=fireY.ToString()+",";
parameterString+=fireZ.ToString()+",";
        NotifyCallFromStub(Common.SendFire, RmiName_SendFire,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SendFire;
        summary.rmiName = RmiName_SendFire;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SendFire (remote,ctx , shooterId, direction, launchForce, fireX, fireY, fireZ );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SendFire);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SendFire;
        summary.rmiName = RmiName_SendFire;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SendTankType(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int tankType; Nettention.Proud.Marshaler.Read(__msg,out tankType);	
core.PostCheckReadMessage(__msg, RmiName_SendTankType);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=tankType.ToString()+",";
        NotifyCallFromStub(Common.SendTankType, RmiName_SendTankType,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SendTankType;
        summary.rmiName = RmiName_SendTankType;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SendTankType (remote,ctx , tankType );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SendTankType);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SendTankType;
        summary.rmiName = RmiName_SendTankType;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SendTankHealthUpdated(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        float currentHealth; Nettention.Proud.Marshaler.Read(__msg,out currentHealth);	
float maxHealth; Nettention.Proud.Marshaler.Read(__msg,out maxHealth);	
core.PostCheckReadMessage(__msg, RmiName_SendTankHealthUpdated);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=currentHealth.ToString()+",";
parameterString+=maxHealth.ToString()+",";
        NotifyCallFromStub(Common.SendTankHealthUpdated, RmiName_SendTankHealthUpdated,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SendTankHealthUpdated;
        summary.rmiName = RmiName_SendTankHealthUpdated;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SendTankHealthUpdated (remote,ctx , currentHealth, maxHealth );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SendTankHealthUpdated);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SendTankHealthUpdated;
        summary.rmiName = RmiName_SendTankHealthUpdated;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SendTankDestroyed(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int destroyedById; Nettention.Proud.Marshaler.Read(__msg,out destroyedById);	
core.PostCheckReadMessage(__msg, RmiName_SendTankDestroyed);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=destroyedById.ToString()+",";
        NotifyCallFromStub(Common.SendTankDestroyed, RmiName_SendTankDestroyed,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SendTankDestroyed;
        summary.rmiName = RmiName_SendTankDestroyed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SendTankDestroyed (remote,ctx , destroyedById );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SendTankDestroyed);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SendTankDestroyed;
        summary.rmiName = RmiName_SendTankDestroyed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SendTankSpawned(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        float posX; Nettention.Proud.Marshaler.Read(__msg,out posX);	
float posY; Nettention.Proud.Marshaler.Read(__msg,out posY);	
float direction; Nettention.Proud.Marshaler.Read(__msg,out direction);	
int tankType; Nettention.Proud.Marshaler.Read(__msg,out tankType);	
float initialHealth; Nettention.Proud.Marshaler.Read(__msg,out initialHealth);	
core.PostCheckReadMessage(__msg, RmiName_SendTankSpawned);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=posX.ToString()+",";
parameterString+=posY.ToString()+",";
parameterString+=direction.ToString()+",";
parameterString+=tankType.ToString()+",";
parameterString+=initialHealth.ToString()+",";
        NotifyCallFromStub(Common.SendTankSpawned, RmiName_SendTankSpawned,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SendTankSpawned;
        summary.rmiName = RmiName_SendTankSpawned;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SendTankSpawned (remote,ctx , posX, posY, direction, tankType, initialHealth );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SendTankSpawned);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SendTankSpawned;
        summary.rmiName = RmiName_SendTankSpawned;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnPlayerJoined(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int clientId; Nettention.Proud.Marshaler.Read(__msg,out clientId);	
float posX; Nettention.Proud.Marshaler.Read(__msg,out posX);	
float posY; Nettention.Proud.Marshaler.Read(__msg,out posY);	
int tankType; Nettention.Proud.Marshaler.Read(__msg,out tankType);	
core.PostCheckReadMessage(__msg, RmiName_OnPlayerJoined);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=clientId.ToString()+",";
parameterString+=posX.ToString()+",";
parameterString+=posY.ToString()+",";
parameterString+=tankType.ToString()+",";
        NotifyCallFromStub(Common.OnPlayerJoined, RmiName_OnPlayerJoined,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnPlayerJoined;
        summary.rmiName = RmiName_OnPlayerJoined;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnPlayerJoined (remote,ctx , clientId, posX, posY, tankType );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnPlayerJoined);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnPlayerJoined;
        summary.rmiName = RmiName_OnPlayerJoined;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnPlayerLeft(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int clientId; Nettention.Proud.Marshaler.Read(__msg,out clientId);	
core.PostCheckReadMessage(__msg, RmiName_OnPlayerLeft);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=clientId.ToString()+",";
        NotifyCallFromStub(Common.OnPlayerLeft, RmiName_OnPlayerLeft,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnPlayerLeft;
        summary.rmiName = RmiName_OnPlayerLeft;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnPlayerLeft (remote,ctx , clientId );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnPlayerLeft);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnPlayerLeft;
        summary.rmiName = RmiName_OnPlayerLeft;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnTankPositionUpdated(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int clientId; Nettention.Proud.Marshaler.Read(__msg,out clientId);	
float posX; Nettention.Proud.Marshaler.Read(__msg,out posX);	
float posY; Nettention.Proud.Marshaler.Read(__msg,out posY);	
float direction; Nettention.Proud.Marshaler.Read(__msg,out direction);	
core.PostCheckReadMessage(__msg, RmiName_OnTankPositionUpdated);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=clientId.ToString()+",";
parameterString+=posX.ToString()+",";
parameterString+=posY.ToString()+",";
parameterString+=direction.ToString()+",";
        NotifyCallFromStub(Common.OnTankPositionUpdated, RmiName_OnTankPositionUpdated,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnTankPositionUpdated;
        summary.rmiName = RmiName_OnTankPositionUpdated;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnTankPositionUpdated (remote,ctx , clientId, posX, posY, direction );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnTankPositionUpdated);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnTankPositionUpdated;
        summary.rmiName = RmiName_OnTankPositionUpdated;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnTankHealthUpdated(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int clientId; Nettention.Proud.Marshaler.Read(__msg,out clientId);	
float currentHealth; Nettention.Proud.Marshaler.Read(__msg,out currentHealth);	
float maxHealth; Nettention.Proud.Marshaler.Read(__msg,out maxHealth);	
core.PostCheckReadMessage(__msg, RmiName_OnTankHealthUpdated);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=clientId.ToString()+",";
parameterString+=currentHealth.ToString()+",";
parameterString+=maxHealth.ToString()+",";
        NotifyCallFromStub(Common.OnTankHealthUpdated, RmiName_OnTankHealthUpdated,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnTankHealthUpdated;
        summary.rmiName = RmiName_OnTankHealthUpdated;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnTankHealthUpdated (remote,ctx , clientId, currentHealth, maxHealth );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnTankHealthUpdated);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnTankHealthUpdated;
        summary.rmiName = RmiName_OnTankHealthUpdated;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnTankDestroyed(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int clientId; Nettention.Proud.Marshaler.Read(__msg,out clientId);	
int destroyedById; Nettention.Proud.Marshaler.Read(__msg,out destroyedById);	
core.PostCheckReadMessage(__msg, RmiName_OnTankDestroyed);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=clientId.ToString()+",";
parameterString+=destroyedById.ToString()+",";
        NotifyCallFromStub(Common.OnTankDestroyed, RmiName_OnTankDestroyed,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnTankDestroyed;
        summary.rmiName = RmiName_OnTankDestroyed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnTankDestroyed (remote,ctx , clientId, destroyedById );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnTankDestroyed);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnTankDestroyed;
        summary.rmiName = RmiName_OnTankDestroyed;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnTankSpawned(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int clientId; Nettention.Proud.Marshaler.Read(__msg,out clientId);	
float posX; Nettention.Proud.Marshaler.Read(__msg,out posX);	
float posY; Nettention.Proud.Marshaler.Read(__msg,out posY);	
float direction; Nettention.Proud.Marshaler.Read(__msg,out direction);	
int tankType; Nettention.Proud.Marshaler.Read(__msg,out tankType);	
float initialHealth; Nettention.Proud.Marshaler.Read(__msg,out initialHealth);	
core.PostCheckReadMessage(__msg, RmiName_OnTankSpawned);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=clientId.ToString()+",";
parameterString+=posX.ToString()+",";
parameterString+=posY.ToString()+",";
parameterString+=direction.ToString()+",";
parameterString+=tankType.ToString()+",";
parameterString+=initialHealth.ToString()+",";
        NotifyCallFromStub(Common.OnTankSpawned, RmiName_OnTankSpawned,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnTankSpawned;
        summary.rmiName = RmiName_OnTankSpawned;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnTankSpawned (remote,ctx , clientId, posX, posY, direction, tankType, initialHealth );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnTankSpawned);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnTankSpawned;
        summary.rmiName = RmiName_OnTankSpawned;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_OnSpawnBullet(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        int clientId; Nettention.Proud.Marshaler.Read(__msg,out clientId);	
int shooterId; Nettention.Proud.Marshaler.Read(__msg,out shooterId);	
float posX; Nettention.Proud.Marshaler.Read(__msg,out posX);	
float posY; Nettention.Proud.Marshaler.Read(__msg,out posY);	
float direction; Nettention.Proud.Marshaler.Read(__msg,out direction);	
float launchForce; Nettention.Proud.Marshaler.Read(__msg,out launchForce);	
float fireX; Nettention.Proud.Marshaler.Read(__msg,out fireX);	
float fireY; Nettention.Proud.Marshaler.Read(__msg,out fireY);	
float fireZ; Nettention.Proud.Marshaler.Read(__msg,out fireZ);	
core.PostCheckReadMessage(__msg, RmiName_OnSpawnBullet);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=clientId.ToString()+",";
parameterString+=shooterId.ToString()+",";
parameterString+=posX.ToString()+",";
parameterString+=posY.ToString()+",";
parameterString+=direction.ToString()+",";
parameterString+=launchForce.ToString()+",";
parameterString+=fireX.ToString()+",";
parameterString+=fireY.ToString()+",";
parameterString+=fireZ.ToString()+",";
        NotifyCallFromStub(Common.OnSpawnBullet, RmiName_OnSpawnBullet,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.OnSpawnBullet;
        summary.rmiName = RmiName_OnSpawnBullet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =OnSpawnBullet (remote,ctx , clientId, shooterId, posX, posY, direction, launchForce, fireX, fireY, fireZ );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_OnSpawnBullet);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.OnSpawnBullet;
        summary.rmiName = RmiName_OnSpawnBullet;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_P2PMessage(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        System.String message; Nettention.Proud.Marshaler.Read(__msg,out message);	
core.PostCheckReadMessage(__msg, RmiName_P2PMessage);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=message.ToString()+",";
        NotifyCallFromStub(Common.P2PMessage, RmiName_P2PMessage,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.P2PMessage;
        summary.rmiName = RmiName_P2PMessage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =P2PMessage (remote,ctx , message );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_P2PMessage);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.P2PMessage;
        summary.rmiName = RmiName_P2PMessage;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_SendMove="SendMove";
public const string RmiName_SendFire="SendFire";
public const string RmiName_SendTankType="SendTankType";
public const string RmiName_SendTankHealthUpdated="SendTankHealthUpdated";
public const string RmiName_SendTankDestroyed="SendTankDestroyed";
public const string RmiName_SendTankSpawned="SendTankSpawned";
public const string RmiName_OnPlayerJoined="OnPlayerJoined";
public const string RmiName_OnPlayerLeft="OnPlayerLeft";
public const string RmiName_OnTankPositionUpdated="OnTankPositionUpdated";
public const string RmiName_OnTankHealthUpdated="OnTankHealthUpdated";
public const string RmiName_OnTankDestroyed="OnTankDestroyed";
public const string RmiName_OnTankSpawned="OnTankSpawned";
public const string RmiName_OnSpawnBullet="OnSpawnBullet";
public const string RmiName_P2PMessage="P2PMessage";
       
public const string RmiName_First = RmiName_SendMove;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_SendMove="";
public const string RmiName_SendFire="";
public const string RmiName_SendTankType="";
public const string RmiName_SendTankHealthUpdated="";
public const string RmiName_SendTankDestroyed="";
public const string RmiName_SendTankSpawned="";
public const string RmiName_OnPlayerJoined="";
public const string RmiName_OnPlayerLeft="";
public const string RmiName_OnTankPositionUpdated="";
public const string RmiName_OnTankHealthUpdated="";
public const string RmiName_OnTankDestroyed="";
public const string RmiName_OnTankSpawned="";
public const string RmiName_OnSpawnBullet="";
public const string RmiName_P2PMessage="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

