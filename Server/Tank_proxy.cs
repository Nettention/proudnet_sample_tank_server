




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;

namespace Tank
{
	internal class Proxy:Nettention.Proud.RmiProxy
	{
public bool SendMove(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float posX, float posY, float direction)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.SendMove;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, posX);
		Nettention.Proud.Marshaler.Write(__msg, posY);
		Nettention.Proud.Marshaler.Write(__msg, direction);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_SendMove, Common.SendMove);
        }
}

public bool SendMove(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, float posX, float posY, float direction)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.SendMove;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, posX);
Nettention.Proud.Marshaler.Write(__msg, posY);
Nettention.Proud.Marshaler.Write(__msg, direction);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_SendMove, Common.SendMove);
        }
}
public bool SendFire(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int shooterId, float direction, float launchForce, float fireX, float fireY, float fireZ)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.SendFire;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, shooterId);
		Nettention.Proud.Marshaler.Write(__msg, direction);
		Nettention.Proud.Marshaler.Write(__msg, launchForce);
		Nettention.Proud.Marshaler.Write(__msg, fireX);
		Nettention.Proud.Marshaler.Write(__msg, fireY);
		Nettention.Proud.Marshaler.Write(__msg, fireZ);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_SendFire, Common.SendFire);
        }
}

public bool SendFire(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int shooterId, float direction, float launchForce, float fireX, float fireY, float fireZ)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.SendFire;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, shooterId);
Nettention.Proud.Marshaler.Write(__msg, direction);
Nettention.Proud.Marshaler.Write(__msg, launchForce);
Nettention.Proud.Marshaler.Write(__msg, fireX);
Nettention.Proud.Marshaler.Write(__msg, fireY);
Nettention.Proud.Marshaler.Write(__msg, fireZ);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_SendFire, Common.SendFire);
        }
}
public bool SendTankType(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int tankType)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.SendTankType;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, tankType);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_SendTankType, Common.SendTankType);
        }
}

public bool SendTankType(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int tankType)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.SendTankType;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, tankType);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_SendTankType, Common.SendTankType);
        }
}
public bool SendTankHealthUpdated(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float currentHealth, float maxHealth)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.SendTankHealthUpdated;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, currentHealth);
		Nettention.Proud.Marshaler.Write(__msg, maxHealth);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_SendTankHealthUpdated, Common.SendTankHealthUpdated);
        }
}

public bool SendTankHealthUpdated(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, float currentHealth, float maxHealth)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.SendTankHealthUpdated;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, currentHealth);
Nettention.Proud.Marshaler.Write(__msg, maxHealth);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_SendTankHealthUpdated, Common.SendTankHealthUpdated);
        }
}
public bool SendTankDestroyed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int destroyedById)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.SendTankDestroyed;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, destroyedById);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_SendTankDestroyed, Common.SendTankDestroyed);
        }
}

public bool SendTankDestroyed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int destroyedById)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.SendTankDestroyed;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, destroyedById);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_SendTankDestroyed, Common.SendTankDestroyed);
        }
}
public bool SendTankSpawned(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, float posX, float posY, float direction, int tankType, float initialHealth)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.SendTankSpawned;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, posX);
		Nettention.Proud.Marshaler.Write(__msg, posY);
		Nettention.Proud.Marshaler.Write(__msg, direction);
		Nettention.Proud.Marshaler.Write(__msg, tankType);
		Nettention.Proud.Marshaler.Write(__msg, initialHealth);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_SendTankSpawned, Common.SendTankSpawned);
        }
}

public bool SendTankSpawned(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, float posX, float posY, float direction, int tankType, float initialHealth)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.SendTankSpawned;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, posX);
Nettention.Proud.Marshaler.Write(__msg, posY);
Nettention.Proud.Marshaler.Write(__msg, direction);
Nettention.Proud.Marshaler.Write(__msg, tankType);
Nettention.Proud.Marshaler.Write(__msg, initialHealth);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_SendTankSpawned, Common.SendTankSpawned);
        }
}
public bool OnPlayerJoined(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, float posX, float posY, int tankType)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.OnPlayerJoined;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, clientId);
		Nettention.Proud.Marshaler.Write(__msg, posX);
		Nettention.Proud.Marshaler.Write(__msg, posY);
		Nettention.Proud.Marshaler.Write(__msg, tankType);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_OnPlayerJoined, Common.OnPlayerJoined);
        }
}

public bool OnPlayerJoined(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int clientId, float posX, float posY, int tankType)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.OnPlayerJoined;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, clientId);
Nettention.Proud.Marshaler.Write(__msg, posX);
Nettention.Proud.Marshaler.Write(__msg, posY);
Nettention.Proud.Marshaler.Write(__msg, tankType);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_OnPlayerJoined, Common.OnPlayerJoined);
        }
}
public bool OnPlayerLeft(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.OnPlayerLeft;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, clientId);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_OnPlayerLeft, Common.OnPlayerLeft);
        }
}

public bool OnPlayerLeft(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int clientId)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.OnPlayerLeft;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, clientId);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_OnPlayerLeft, Common.OnPlayerLeft);
        }
}
public bool OnTankPositionUpdated(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, float posX, float posY, float direction)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.OnTankPositionUpdated;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, clientId);
		Nettention.Proud.Marshaler.Write(__msg, posX);
		Nettention.Proud.Marshaler.Write(__msg, posY);
		Nettention.Proud.Marshaler.Write(__msg, direction);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_OnTankPositionUpdated, Common.OnTankPositionUpdated);
        }
}

public bool OnTankPositionUpdated(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int clientId, float posX, float posY, float direction)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.OnTankPositionUpdated;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, clientId);
Nettention.Proud.Marshaler.Write(__msg, posX);
Nettention.Proud.Marshaler.Write(__msg, posY);
Nettention.Proud.Marshaler.Write(__msg, direction);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_OnTankPositionUpdated, Common.OnTankPositionUpdated);
        }
}
public bool OnTankHealthUpdated(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, float currentHealth, float maxHealth)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.OnTankHealthUpdated;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, clientId);
		Nettention.Proud.Marshaler.Write(__msg, currentHealth);
		Nettention.Proud.Marshaler.Write(__msg, maxHealth);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_OnTankHealthUpdated, Common.OnTankHealthUpdated);
        }
}

public bool OnTankHealthUpdated(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int clientId, float currentHealth, float maxHealth)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.OnTankHealthUpdated;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, clientId);
Nettention.Proud.Marshaler.Write(__msg, currentHealth);
Nettention.Proud.Marshaler.Write(__msg, maxHealth);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_OnTankHealthUpdated, Common.OnTankHealthUpdated);
        }
}
public bool OnTankDestroyed(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, int destroyedById)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.OnTankDestroyed;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, clientId);
		Nettention.Proud.Marshaler.Write(__msg, destroyedById);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_OnTankDestroyed, Common.OnTankDestroyed);
        }
}

public bool OnTankDestroyed(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int clientId, int destroyedById)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.OnTankDestroyed;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, clientId);
Nettention.Proud.Marshaler.Write(__msg, destroyedById);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_OnTankDestroyed, Common.OnTankDestroyed);
        }
}
public bool OnTankSpawned(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, float posX, float posY, float direction, int tankType, float initialHealth)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.OnTankSpawned;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, clientId);
		Nettention.Proud.Marshaler.Write(__msg, posX);
		Nettention.Proud.Marshaler.Write(__msg, posY);
		Nettention.Proud.Marshaler.Write(__msg, direction);
		Nettention.Proud.Marshaler.Write(__msg, tankType);
		Nettention.Proud.Marshaler.Write(__msg, initialHealth);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_OnTankSpawned, Common.OnTankSpawned);
        }
}

public bool OnTankSpawned(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int clientId, float posX, float posY, float direction, int tankType, float initialHealth)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.OnTankSpawned;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, clientId);
Nettention.Proud.Marshaler.Write(__msg, posX);
Nettention.Proud.Marshaler.Write(__msg, posY);
Nettention.Proud.Marshaler.Write(__msg, direction);
Nettention.Proud.Marshaler.Write(__msg, tankType);
Nettention.Proud.Marshaler.Write(__msg, initialHealth);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_OnTankSpawned, Common.OnTankSpawned);
        }
}
public bool OnSpawnBullet(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, int clientId, int shooterId, float posX, float posY, float direction, float launchForce, float fireX, float fireY, float fireZ)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.OnSpawnBullet;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, clientId);
		Nettention.Proud.Marshaler.Write(__msg, shooterId);
		Nettention.Proud.Marshaler.Write(__msg, posX);
		Nettention.Proud.Marshaler.Write(__msg, posY);
		Nettention.Proud.Marshaler.Write(__msg, direction);
		Nettention.Proud.Marshaler.Write(__msg, launchForce);
		Nettention.Proud.Marshaler.Write(__msg, fireX);
		Nettention.Proud.Marshaler.Write(__msg, fireY);
		Nettention.Proud.Marshaler.Write(__msg, fireZ);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_OnSpawnBullet, Common.OnSpawnBullet);
        }
}

public bool OnSpawnBullet(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, int clientId, int shooterId, float posX, float posY, float direction, float launchForce, float fireX, float fireY, float fireZ)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.OnSpawnBullet;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, clientId);
Nettention.Proud.Marshaler.Write(__msg, shooterId);
Nettention.Proud.Marshaler.Write(__msg, posX);
Nettention.Proud.Marshaler.Write(__msg, posY);
Nettention.Proud.Marshaler.Write(__msg, direction);
Nettention.Proud.Marshaler.Write(__msg, launchForce);
Nettention.Proud.Marshaler.Write(__msg, fireX);
Nettention.Proud.Marshaler.Write(__msg, fireY);
Nettention.Proud.Marshaler.Write(__msg, fireZ);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_OnSpawnBullet, Common.OnSpawnBullet);
        }
}
public bool P2PMessage(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, System.String message)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
		{
		Nettention.Proud.Message __msg=freeList.GetObject();
		__msg.Clear();
		__msg.SimplePacketMode = core.IsSimplePacketMode();
		Nettention.Proud.RmiID __msgid= Common.P2PMessage;
		__msg.Write(__msgid);
		Nettention.Proud.Marshaler.Write(__msg, message);
		
	Nettention.Proud.HostID[] __list = new Nettention.Proud.HostID[1];
	__list[0] = remote;
		
	return RmiSend(__list,rmiContext,__msg,
		RmiName_P2PMessage, Common.P2PMessage);
        }
}

public bool P2PMessage(Nettention.Proud.HostID[] remotes,Nettention.Proud.RmiContext rmiContext, System.String message)
{
	using (Nettention.Proud.FreeListPopper<Nettention.Proud.Message> freeList = new Nettention.Proud.FreeListPopper<Nettention.Proud.Message>())
{
Nettention.Proud.Message __msg=freeList.GetObject();
__msg.Clear();
__msg.SimplePacketMode = core.IsSimplePacketMode();
Nettention.Proud.RmiID __msgid= Common.P2PMessage;
__msg.Write(__msgid);
Nettention.Proud.Marshaler.Write(__msg, message);
		
	return RmiSend(remotes,rmiContext,__msg,
		RmiName_P2PMessage, Common.P2PMessage);
        }
}
	
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_SendMove="SendMove";
public const string RmiName_SendFire="SendFire";
public const string RmiName_SendTankType="SendTankType";
public const string RmiName_SendTankHealthUpdated="SendTankHealthUpdated";
public const string RmiName_SendTankDestroyed="SendTankDestroyed";
public const string RmiName_SendTankSpawned="SendTankSpawned";
public const string RmiName_OnPlayerJoined="OnPlayerJoined";
public const string RmiName_OnPlayerLeft="OnPlayerLeft";
public const string RmiName_OnTankPositionUpdated="OnTankPositionUpdated";
public const string RmiName_OnTankHealthUpdated="OnTankHealthUpdated";
public const string RmiName_OnTankDestroyed="OnTankDestroyed";
public const string RmiName_OnTankSpawned="OnTankSpawned";
public const string RmiName_OnSpawnBullet="OnSpawnBullet";
public const string RmiName_P2PMessage="P2PMessage";
       
public const string RmiName_First = RmiName_SendMove;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_SendMove="";
public const string RmiName_SendFire="";
public const string RmiName_SendTankType="";
public const string RmiName_SendTankHealthUpdated="";
public const string RmiName_SendTankDestroyed="";
public const string RmiName_SendTankSpawned="";
public const string RmiName_OnPlayerJoined="";
public const string RmiName_OnPlayerLeft="";
public const string RmiName_OnTankPositionUpdated="";
public const string RmiName_OnTankHealthUpdated="";
public const string RmiName_OnTankDestroyed="";
public const string RmiName_OnTankSpawned="";
public const string RmiName_OnSpawnBullet="";
public const string RmiName_P2PMessage="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList() { return Common.RmiIDList; } 
	}
}

