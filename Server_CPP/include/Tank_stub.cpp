  





// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

  
#include "Tank_stub.h"


const unsigned char sz_Tank_stub_hRmi[] = 
{ 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff, 0x00, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xff,
0xaa, 0xbb, 0xcc, 0xdd, 0xff,0x99, 0xaa, 0xbb, 0xcc, 0x99, 0xaa, 0xdd, 0xff, 0x00 };   


namespace Tank {


	bool Stub::ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) 
	{
#ifndef __FreeBSD__ 
		{
			// unusable but required. you may ignore it, because it does not occur any worthless load.
			unsigned char x = sz_Tank_stub_hRmi[0]; 
			x++; 
		}
#endif
		::Proud::HostID remote=pa.GetRemoteHostID();
		if(remote==::Proud::HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		::Proud::CMessage &__msg=pa.GetReadOnlyMessage();
		int orgReadOffset = __msg.GetReadOffset();

		::Proud::RmiID __rmiID;
		if(!__msg.Read(__rmiID))
			goto __fail;
					
		switch((int)__rmiID) // case is to prevent from clang compile error
		{
			case Rmi_SendMove:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					float posX; __msg >> posX;
					float posY; __msg >> posY;
					float direction; __msg >> direction;
					m_core->PostCheckReadMessage(__msg,RmiName_SendMove);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,posX);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,posY);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,direction);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_SendMove, 
							RmiName_SendMove,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_SendMove, 
							RmiName_SendMove, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_SendMove, 
							RmiName_SendMove, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_SendMove;
						summary.m_rmiName = RmiName_SendMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = SendMove (remote,ctx , posX, posY, direction );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_SendMove);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_SendMove;
						summary.m_rmiName = RmiName_SendMove;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_SendFire:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int shooterId; __msg >> shooterId;
					float direction; __msg >> direction;
					float launchForce; __msg >> launchForce;
					float fireX; __msg >> fireX;
					float fireY; __msg >> fireY;
					float fireZ; __msg >> fireZ;
					m_core->PostCheckReadMessage(__msg,RmiName_SendFire);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,shooterId);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,direction);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,launchForce);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,fireX);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,fireY);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,fireZ);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_SendFire, 
							RmiName_SendFire,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_SendFire, 
							RmiName_SendFire, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_SendFire, 
							RmiName_SendFire, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_SendFire;
						summary.m_rmiName = RmiName_SendFire;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = SendFire (remote,ctx , shooterId, direction, launchForce, fireX, fireY, fireZ );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_SendFire);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_SendFire;
						summary.m_rmiName = RmiName_SendFire;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_SendTankType:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int tankType; __msg >> tankType;
					m_core->PostCheckReadMessage(__msg,RmiName_SendTankType);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,tankType);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_SendTankType, 
							RmiName_SendTankType,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_SendTankType, 
							RmiName_SendTankType, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_SendTankType, 
							RmiName_SendTankType, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_SendTankType;
						summary.m_rmiName = RmiName_SendTankType;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = SendTankType (remote,ctx , tankType );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_SendTankType);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_SendTankType;
						summary.m_rmiName = RmiName_SendTankType;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_SendTankHealthUpdated:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					float currentHealth; __msg >> currentHealth;
					float maxHealth; __msg >> maxHealth;
					m_core->PostCheckReadMessage(__msg,RmiName_SendTankHealthUpdated);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,currentHealth);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,maxHealth);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_SendTankHealthUpdated, 
							RmiName_SendTankHealthUpdated,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_SendTankHealthUpdated, 
							RmiName_SendTankHealthUpdated, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_SendTankHealthUpdated, 
							RmiName_SendTankHealthUpdated, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_SendTankHealthUpdated;
						summary.m_rmiName = RmiName_SendTankHealthUpdated;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = SendTankHealthUpdated (remote,ctx , currentHealth, maxHealth );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_SendTankHealthUpdated);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_SendTankHealthUpdated;
						summary.m_rmiName = RmiName_SendTankHealthUpdated;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_SendTankDestroyed:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int destroyedById; __msg >> destroyedById;
					m_core->PostCheckReadMessage(__msg,RmiName_SendTankDestroyed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,destroyedById);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_SendTankDestroyed, 
							RmiName_SendTankDestroyed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_SendTankDestroyed, 
							RmiName_SendTankDestroyed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_SendTankDestroyed, 
							RmiName_SendTankDestroyed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_SendTankDestroyed;
						summary.m_rmiName = RmiName_SendTankDestroyed;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = SendTankDestroyed (remote,ctx , destroyedById );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_SendTankDestroyed);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_SendTankDestroyed;
						summary.m_rmiName = RmiName_SendTankDestroyed;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_SendTankSpawned:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					float posX; __msg >> posX;
					float posY; __msg >> posY;
					float direction; __msg >> direction;
					int tankType; __msg >> tankType;
					float initialHealth; __msg >> initialHealth;
					m_core->PostCheckReadMessage(__msg,RmiName_SendTankSpawned);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,posX);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,posY);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,direction);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tankType);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,initialHealth);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_SendTankSpawned, 
							RmiName_SendTankSpawned,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_SendTankSpawned, 
							RmiName_SendTankSpawned, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_SendTankSpawned, 
							RmiName_SendTankSpawned, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_SendTankSpawned;
						summary.m_rmiName = RmiName_SendTankSpawned;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = SendTankSpawned (remote,ctx , posX, posY, direction, tankType, initialHealth );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_SendTankSpawned);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_SendTankSpawned;
						summary.m_rmiName = RmiName_SendTankSpawned;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_OnPlayerJoined:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int clientId; __msg >> clientId;
					float posX; __msg >> posX;
					float posY; __msg >> posY;
					int tankType; __msg >> tankType;
					m_core->PostCheckReadMessage(__msg,RmiName_OnPlayerJoined);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,clientId);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,posX);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,posY);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tankType);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_OnPlayerJoined, 
							RmiName_OnPlayerJoined,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OnPlayerJoined, 
							RmiName_OnPlayerJoined, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OnPlayerJoined, 
							RmiName_OnPlayerJoined, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OnPlayerJoined;
						summary.m_rmiName = RmiName_OnPlayerJoined;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = OnPlayerJoined (remote,ctx , clientId, posX, posY, tankType );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_OnPlayerJoined);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OnPlayerJoined;
						summary.m_rmiName = RmiName_OnPlayerJoined;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_OnPlayerLeft:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int clientId; __msg >> clientId;
					m_core->PostCheckReadMessage(__msg,RmiName_OnPlayerLeft);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,clientId);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_OnPlayerLeft, 
							RmiName_OnPlayerLeft,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OnPlayerLeft, 
							RmiName_OnPlayerLeft, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OnPlayerLeft, 
							RmiName_OnPlayerLeft, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OnPlayerLeft;
						summary.m_rmiName = RmiName_OnPlayerLeft;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = OnPlayerLeft (remote,ctx , clientId );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_OnPlayerLeft);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OnPlayerLeft;
						summary.m_rmiName = RmiName_OnPlayerLeft;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_OnTankPositionUpdated:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int clientId; __msg >> clientId;
					float posX; __msg >> posX;
					float posY; __msg >> posY;
					float direction; __msg >> direction;
					m_core->PostCheckReadMessage(__msg,RmiName_OnTankPositionUpdated);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,clientId);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,posX);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,posY);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,direction);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_OnTankPositionUpdated, 
							RmiName_OnTankPositionUpdated,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OnTankPositionUpdated, 
							RmiName_OnTankPositionUpdated, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OnTankPositionUpdated, 
							RmiName_OnTankPositionUpdated, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OnTankPositionUpdated;
						summary.m_rmiName = RmiName_OnTankPositionUpdated;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = OnTankPositionUpdated (remote,ctx , clientId, posX, posY, direction );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_OnTankPositionUpdated);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OnTankPositionUpdated;
						summary.m_rmiName = RmiName_OnTankPositionUpdated;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_OnTankHealthUpdated:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int clientId; __msg >> clientId;
					float currentHealth; __msg >> currentHealth;
					float maxHealth; __msg >> maxHealth;
					m_core->PostCheckReadMessage(__msg,RmiName_OnTankHealthUpdated);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,clientId);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,currentHealth);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,maxHealth);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_OnTankHealthUpdated, 
							RmiName_OnTankHealthUpdated,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OnTankHealthUpdated, 
							RmiName_OnTankHealthUpdated, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OnTankHealthUpdated, 
							RmiName_OnTankHealthUpdated, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OnTankHealthUpdated;
						summary.m_rmiName = RmiName_OnTankHealthUpdated;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = OnTankHealthUpdated (remote,ctx , clientId, currentHealth, maxHealth );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_OnTankHealthUpdated);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OnTankHealthUpdated;
						summary.m_rmiName = RmiName_OnTankHealthUpdated;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_OnTankDestroyed:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int clientId; __msg >> clientId;
					int destroyedById; __msg >> destroyedById;
					m_core->PostCheckReadMessage(__msg,RmiName_OnTankDestroyed);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,clientId);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,destroyedById);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_OnTankDestroyed, 
							RmiName_OnTankDestroyed,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OnTankDestroyed, 
							RmiName_OnTankDestroyed, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OnTankDestroyed, 
							RmiName_OnTankDestroyed, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OnTankDestroyed;
						summary.m_rmiName = RmiName_OnTankDestroyed;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = OnTankDestroyed (remote,ctx , clientId, destroyedById );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_OnTankDestroyed);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OnTankDestroyed;
						summary.m_rmiName = RmiName_OnTankDestroyed;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_OnTankSpawned:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int clientId; __msg >> clientId;
					float posX; __msg >> posX;
					float posY; __msg >> posY;
					float direction; __msg >> direction;
					int tankType; __msg >> tankType;
					float initialHealth; __msg >> initialHealth;
					m_core->PostCheckReadMessage(__msg,RmiName_OnTankSpawned);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,clientId);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,posX);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,posY);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,direction);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,tankType);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,initialHealth);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_OnTankSpawned, 
							RmiName_OnTankSpawned,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OnTankSpawned, 
							RmiName_OnTankSpawned, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OnTankSpawned, 
							RmiName_OnTankSpawned, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OnTankSpawned;
						summary.m_rmiName = RmiName_OnTankSpawned;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = OnTankSpawned (remote,ctx , clientId, posX, posY, direction, tankType, initialHealth );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_OnTankSpawned);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OnTankSpawned;
						summary.m_rmiName = RmiName_OnTankSpawned;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_OnSpawnBullet:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					int clientId; __msg >> clientId;
					int shooterId; __msg >> shooterId;
					float posX; __msg >> posX;
					float posY; __msg >> posY;
					float direction; __msg >> direction;
					float launchForce; __msg >> launchForce;
					float fireX; __msg >> fireX;
					float fireY; __msg >> fireY;
					float fireZ; __msg >> fireZ;
					m_core->PostCheckReadMessage(__msg,RmiName_OnSpawnBullet);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,clientId);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,shooterId);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,posX);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,posY);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,direction);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,launchForce);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,fireX);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,fireY);	
										
						parameterString += _PNT(", ");
						::Proud::AppendTextOut(parameterString,fireZ);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_OnSpawnBullet, 
							RmiName_OnSpawnBullet,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OnSpawnBullet, 
							RmiName_OnSpawnBullet, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_OnSpawnBullet, 
							RmiName_OnSpawnBullet, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OnSpawnBullet;
						summary.m_rmiName = RmiName_OnSpawnBullet;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = OnSpawnBullet (remote,ctx , clientId, shooterId, posX, posY, direction, launchForce, fireX, fireY, fireZ );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_OnSpawnBullet);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_OnSpawnBullet;
						summary.m_rmiName = RmiName_OnSpawnBullet;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
			case Rmi_P2PMessage:
				{
					::Proud::RmiContext ctx;
					ctx.m_rmiID = __rmiID;
					ctx.m_sentFrom=pa.GetRemoteHostID();
					ctx.m_relayed=pa.IsRelayed();
					ctx.m_hostTag = hostTag;
					ctx.m_encryptMode = pa.GetEncryptMode();
					ctx.m_compressMode = pa.GetCompressMode();
			
			        if(BeforeDeserialize(remote, ctx, __msg) == false)
			        {
			            // The user don't want to call the RMI function. 
						// So, We fake that it has been already called.
						__msg.SetReadOffset(__msg.GetLength());
			            return true;
			        }
			
					Proud::String message; __msg >> message;
					m_core->PostCheckReadMessage(__msg,RmiName_P2PMessage);
					
			
					if(m_enableNotifyCallFromStub && !m_internalUse)
					{
						::Proud::String parameterString;
						
						::Proud::AppendTextOut(parameterString,message);	
						
						NotifyCallFromStub(remote, (::Proud::RmiID)Rmi_P2PMessage, 
							RmiName_P2PMessage,parameterString);
			
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_P2PMessage, 
							RmiName_P2PMessage, parameterString);
			#endif
					}
					else if(!m_internalUse)
					{
			#ifdef VIZAGENT
						m_core->Viz_NotifyRecvToStub(remote, (::Proud::RmiID)Rmi_P2PMessage, 
							RmiName_P2PMessage, _PNT(""));
			#endif
					}
						
					int64_t __t0 = 0;
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::BeforeRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_P2PMessage;
						summary.m_rmiName = RmiName_P2PMessage;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						BeforeRmiInvocation(summary);
			
						__t0 = ::Proud::GetPreciseCurrentTimeMs();
					}
						
					// Call this method.
					bool __ret = P2PMessage (remote,ctx , message );
						
					if(__ret==false)
					{
						// Error: RMI function that a user did not create has been called. 
						m_core->ShowNotImplementedRmiWarning(RmiName_P2PMessage);
					}
						
					if(!m_internalUse && m_enableStubProfiling)
					{
						::Proud::AfterRmiSummary summary;
						summary.m_rmiID = (::Proud::RmiID)Rmi_P2PMessage;
						summary.m_rmiName = RmiName_P2PMessage;
						summary.m_hostID = remote;
						summary.m_hostTag = hostTag;
						int64_t __t1;
			
						__t1 = ::Proud::GetPreciseCurrentTimeMs();
			
						summary.m_elapsedTime = (uint32_t)(__t1 - __t0);
						AfterRmiInvocation(summary);
					}
				}
				break;
		default:
			goto __fail;
		}		
		return true;
__fail:
		{
			__msg.SetReadOffset(orgReadOffset);
			return false;
		}
	}
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_SendMove =_PNT("SendMove");
	#else
	const PNTCHAR* Stub::RmiName_SendMove =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_SendFire =_PNT("SendFire");
	#else
	const PNTCHAR* Stub::RmiName_SendFire =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_SendTankType =_PNT("SendTankType");
	#else
	const PNTCHAR* Stub::RmiName_SendTankType =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_SendTankHealthUpdated =_PNT("SendTankHealthUpdated");
	#else
	const PNTCHAR* Stub::RmiName_SendTankHealthUpdated =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_SendTankDestroyed =_PNT("SendTankDestroyed");
	#else
	const PNTCHAR* Stub::RmiName_SendTankDestroyed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_SendTankSpawned =_PNT("SendTankSpawned");
	#else
	const PNTCHAR* Stub::RmiName_SendTankSpawned =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_OnPlayerJoined =_PNT("OnPlayerJoined");
	#else
	const PNTCHAR* Stub::RmiName_OnPlayerJoined =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_OnPlayerLeft =_PNT("OnPlayerLeft");
	#else
	const PNTCHAR* Stub::RmiName_OnPlayerLeft =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_OnTankPositionUpdated =_PNT("OnTankPositionUpdated");
	#else
	const PNTCHAR* Stub::RmiName_OnTankPositionUpdated =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_OnTankHealthUpdated =_PNT("OnTankHealthUpdated");
	#else
	const PNTCHAR* Stub::RmiName_OnTankHealthUpdated =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_OnTankDestroyed =_PNT("OnTankDestroyed");
	#else
	const PNTCHAR* Stub::RmiName_OnTankDestroyed =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_OnTankSpawned =_PNT("OnTankSpawned");
	#else
	const PNTCHAR* Stub::RmiName_OnTankSpawned =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_OnSpawnBullet =_PNT("OnSpawnBullet");
	#else
	const PNTCHAR* Stub::RmiName_OnSpawnBullet =_PNT("");
	#endif
	#ifdef USE_RMI_NAME_STRING
	const PNTCHAR* Stub::RmiName_P2PMessage =_PNT("P2PMessage");
	#else
	const PNTCHAR* Stub::RmiName_P2PMessage =_PNT("");
	#endif
	const PNTCHAR* Stub::RmiName_First = RmiName_SendMove;

}



