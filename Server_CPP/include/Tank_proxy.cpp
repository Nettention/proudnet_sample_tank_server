




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.


#include "Tank_proxy.h"

namespace Tank {


        
	bool Proxy::SendMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & posX, const float & posY, const float & direction)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendMove;
__msg.Write(__msgid); 
	
__msg << posX;
__msg << posY;
__msg << direction;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_SendMove, (::Proud::RmiID)Rmi_SendMove);
	}

	bool Proxy::SendMove ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const float & posX, const float & posY, const float & direction)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendMove;
__msg.Write(__msgid); 
	
__msg << posX;
__msg << posY;
__msg << direction;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_SendMove, (::Proud::RmiID)Rmi_SendMove);
	}
        
	bool Proxy::SendFire ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & shooterId, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendFire;
__msg.Write(__msgid); 
	
__msg << shooterId;
__msg << direction;
__msg << launchForce;
__msg << fireX;
__msg << fireY;
__msg << fireZ;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_SendFire, (::Proud::RmiID)Rmi_SendFire);
	}

	bool Proxy::SendFire ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & shooterId, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendFire;
__msg.Write(__msgid); 
	
__msg << shooterId;
__msg << direction;
__msg << launchForce;
__msg << fireX;
__msg << fireY;
__msg << fireZ;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_SendFire, (::Proud::RmiID)Rmi_SendFire);
	}
        
	bool Proxy::SendTankType ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & tankType)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendTankType;
__msg.Write(__msgid); 
	
__msg << tankType;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_SendTankType, (::Proud::RmiID)Rmi_SendTankType);
	}

	bool Proxy::SendTankType ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & tankType)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendTankType;
__msg.Write(__msgid); 
	
__msg << tankType;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_SendTankType, (::Proud::RmiID)Rmi_SendTankType);
	}
        
	bool Proxy::SendTankHealthUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & currentHealth, const float & maxHealth)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendTankHealthUpdated;
__msg.Write(__msgid); 
	
__msg << currentHealth;
__msg << maxHealth;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_SendTankHealthUpdated, (::Proud::RmiID)Rmi_SendTankHealthUpdated);
	}

	bool Proxy::SendTankHealthUpdated ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const float & currentHealth, const float & maxHealth)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendTankHealthUpdated;
__msg.Write(__msgid); 
	
__msg << currentHealth;
__msg << maxHealth;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_SendTankHealthUpdated, (::Proud::RmiID)Rmi_SendTankHealthUpdated);
	}
        
	bool Proxy::SendTankDestroyed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & destroyedById)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendTankDestroyed;
__msg.Write(__msgid); 
	
__msg << destroyedById;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_SendTankDestroyed, (::Proud::RmiID)Rmi_SendTankDestroyed);
	}

	bool Proxy::SendTankDestroyed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & destroyedById)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendTankDestroyed;
__msg.Write(__msgid); 
	
__msg << destroyedById;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_SendTankDestroyed, (::Proud::RmiID)Rmi_SendTankDestroyed);
	}
        
	bool Proxy::SendTankSpawned ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendTankSpawned;
__msg.Write(__msgid); 
	
__msg << posX;
__msg << posY;
__msg << direction;
__msg << tankType;
__msg << initialHealth;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_SendTankSpawned, (::Proud::RmiID)Rmi_SendTankSpawned);
	}

	bool Proxy::SendTankSpawned ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_SendTankSpawned;
__msg.Write(__msgid); 
	
__msg << posX;
__msg << posY;
__msg << direction;
__msg << tankType;
__msg << initialHealth;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_SendTankSpawned, (::Proud::RmiID)Rmi_SendTankSpawned);
	}
        
	bool Proxy::OnPlayerJoined ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const int & tankType)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OnPlayerJoined;
__msg.Write(__msgid); 
	
__msg << clientId;
__msg << posX;
__msg << posY;
__msg << tankType;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_OnPlayerJoined, (::Proud::RmiID)Rmi_OnPlayerJoined);
	}

	bool Proxy::OnPlayerJoined ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & clientId, const float & posX, const float & posY, const int & tankType)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OnPlayerJoined;
__msg.Write(__msgid); 
	
__msg << clientId;
__msg << posX;
__msg << posY;
__msg << tankType;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_OnPlayerJoined, (::Proud::RmiID)Rmi_OnPlayerJoined);
	}
        
	bool Proxy::OnPlayerLeft ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OnPlayerLeft;
__msg.Write(__msgid); 
	
__msg << clientId;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_OnPlayerLeft, (::Proud::RmiID)Rmi_OnPlayerLeft);
	}

	bool Proxy::OnPlayerLeft ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & clientId)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OnPlayerLeft;
__msg.Write(__msgid); 
	
__msg << clientId;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_OnPlayerLeft, (::Proud::RmiID)Rmi_OnPlayerLeft);
	}
        
	bool Proxy::OnTankPositionUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const float & direction)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OnTankPositionUpdated;
__msg.Write(__msgid); 
	
__msg << clientId;
__msg << posX;
__msg << posY;
__msg << direction;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_OnTankPositionUpdated, (::Proud::RmiID)Rmi_OnTankPositionUpdated);
	}

	bool Proxy::OnTankPositionUpdated ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & clientId, const float & posX, const float & posY, const float & direction)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OnTankPositionUpdated;
__msg.Write(__msgid); 
	
__msg << clientId;
__msg << posX;
__msg << posY;
__msg << direction;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_OnTankPositionUpdated, (::Proud::RmiID)Rmi_OnTankPositionUpdated);
	}
        
	bool Proxy::OnTankHealthUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & currentHealth, const float & maxHealth)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OnTankHealthUpdated;
__msg.Write(__msgid); 
	
__msg << clientId;
__msg << currentHealth;
__msg << maxHealth;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_OnTankHealthUpdated, (::Proud::RmiID)Rmi_OnTankHealthUpdated);
	}

	bool Proxy::OnTankHealthUpdated ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & clientId, const float & currentHealth, const float & maxHealth)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OnTankHealthUpdated;
__msg.Write(__msgid); 
	
__msg << clientId;
__msg << currentHealth;
__msg << maxHealth;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_OnTankHealthUpdated, (::Proud::RmiID)Rmi_OnTankHealthUpdated);
	}
        
	bool Proxy::OnTankDestroyed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const int & destroyedById)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OnTankDestroyed;
__msg.Write(__msgid); 
	
__msg << clientId;
__msg << destroyedById;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_OnTankDestroyed, (::Proud::RmiID)Rmi_OnTankDestroyed);
	}

	bool Proxy::OnTankDestroyed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & clientId, const int & destroyedById)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OnTankDestroyed;
__msg.Write(__msgid); 
	
__msg << clientId;
__msg << destroyedById;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_OnTankDestroyed, (::Proud::RmiID)Rmi_OnTankDestroyed);
	}
        
	bool Proxy::OnTankSpawned ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OnTankSpawned;
__msg.Write(__msgid); 
	
__msg << clientId;
__msg << posX;
__msg << posY;
__msg << direction;
__msg << tankType;
__msg << initialHealth;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_OnTankSpawned, (::Proud::RmiID)Rmi_OnTankSpawned);
	}

	bool Proxy::OnTankSpawned ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & clientId, const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OnTankSpawned;
__msg.Write(__msgid); 
	
__msg << clientId;
__msg << posX;
__msg << posY;
__msg << direction;
__msg << tankType;
__msg << initialHealth;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_OnTankSpawned, (::Proud::RmiID)Rmi_OnTankSpawned);
	}
        
	bool Proxy::OnSpawnBullet ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const int & shooterId, const float & posX, const float & posY, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OnSpawnBullet;
__msg.Write(__msgid); 
	
__msg << clientId;
__msg << shooterId;
__msg << posX;
__msg << posY;
__msg << direction;
__msg << launchForce;
__msg << fireX;
__msg << fireY;
__msg << fireZ;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_OnSpawnBullet, (::Proud::RmiID)Rmi_OnSpawnBullet);
	}

	bool Proxy::OnSpawnBullet ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & clientId, const int & shooterId, const float & posX, const float & posY, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_OnSpawnBullet;
__msg.Write(__msgid); 
	
__msg << clientId;
__msg << shooterId;
__msg << posX;
__msg << posY;
__msg << direction;
__msg << launchForce;
__msg << fireX;
__msg << fireY;
__msg << fireZ;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_OnSpawnBullet, (::Proud::RmiID)Rmi_OnSpawnBullet);
	}
        
	bool Proxy::P2PMessage ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & message)	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2PMessage;
__msg.Write(__msgid); 
	
__msg << message;
		
		return RmiSend(&remote,1,rmiContext,__msg,
			RmiName_P2PMessage, (::Proud::RmiID)Rmi_P2PMessage);
	}

	bool Proxy::P2PMessage ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & message)  	{
		::Proud::CMessage __msg;
__msg.UseInternalBuffer();
__msg.SetSimplePacketMode(m_core->IsSimplePacketMode());

::Proud::RmiID __msgid=(::Proud::RmiID)Rmi_P2PMessage;
__msg.Write(__msgid); 
	
__msg << message;
		
		return RmiSend(remotes,remoteCount,rmiContext,__msg,
			RmiName_P2PMessage, (::Proud::RmiID)Rmi_P2PMessage);
	}
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_SendMove =_PNT("SendMove");
#else
const PNTCHAR* Proxy::RmiName_SendMove =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_SendFire =_PNT("SendFire");
#else
const PNTCHAR* Proxy::RmiName_SendFire =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_SendTankType =_PNT("SendTankType");
#else
const PNTCHAR* Proxy::RmiName_SendTankType =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_SendTankHealthUpdated =_PNT("SendTankHealthUpdated");
#else
const PNTCHAR* Proxy::RmiName_SendTankHealthUpdated =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_SendTankDestroyed =_PNT("SendTankDestroyed");
#else
const PNTCHAR* Proxy::RmiName_SendTankDestroyed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_SendTankSpawned =_PNT("SendTankSpawned");
#else
const PNTCHAR* Proxy::RmiName_SendTankSpawned =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_OnPlayerJoined =_PNT("OnPlayerJoined");
#else
const PNTCHAR* Proxy::RmiName_OnPlayerJoined =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_OnPlayerLeft =_PNT("OnPlayerLeft");
#else
const PNTCHAR* Proxy::RmiName_OnPlayerLeft =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_OnTankPositionUpdated =_PNT("OnTankPositionUpdated");
#else
const PNTCHAR* Proxy::RmiName_OnTankPositionUpdated =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_OnTankHealthUpdated =_PNT("OnTankHealthUpdated");
#else
const PNTCHAR* Proxy::RmiName_OnTankHealthUpdated =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_OnTankDestroyed =_PNT("OnTankDestroyed");
#else
const PNTCHAR* Proxy::RmiName_OnTankDestroyed =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_OnTankSpawned =_PNT("OnTankSpawned");
#else
const PNTCHAR* Proxy::RmiName_OnTankSpawned =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_OnSpawnBullet =_PNT("OnSpawnBullet");
#else
const PNTCHAR* Proxy::RmiName_OnSpawnBullet =_PNT("");
#endif
#ifdef USE_RMI_NAME_STRING
const PNTCHAR* Proxy::RmiName_P2PMessage =_PNT("P2PMessage");
#else
const PNTCHAR* Proxy::RmiName_P2PMessage =_PNT("");
#endif
const PNTCHAR* Proxy::RmiName_First = RmiName_SendMove;

}



