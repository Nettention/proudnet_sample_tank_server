  






// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.
   
#pragma once


#include "Tank_common.h"

     
namespace Tank {


	class Stub : public ::Proud::IRmiStub
	{
	public:
               
		virtual bool SendMove ( ::Proud::HostID, ::Proud::RmiContext& , const float & , const float & , const float & )		{ 
			return false;
		} 

#define DECRMI_Tank_SendMove bool SendMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & posX, const float & posY, const float & direction) PN_OVERRIDE

#define DEFRMI_Tank_SendMove(DerivedClass) bool DerivedClass::SendMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & posX, const float & posY, const float & direction)
#define CALL_Tank_SendMove SendMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & posX, const float & posY, const float & direction)
#define PARAM_Tank_SendMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & posX, const float & posY, const float & direction)
               
		virtual bool SendFire ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const float & , const float & , const float & , const float & , const float & )		{ 
			return false;
		} 

#define DECRMI_Tank_SendFire bool SendFire ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & shooterId, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ) PN_OVERRIDE

#define DEFRMI_Tank_SendFire(DerivedClass) bool DerivedClass::SendFire ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & shooterId, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ)
#define CALL_Tank_SendFire SendFire ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & shooterId, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ)
#define PARAM_Tank_SendFire ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & shooterId, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ)
               
		virtual bool SendTankType ( ::Proud::HostID, ::Proud::RmiContext& , const int & )		{ 
			return false;
		} 

#define DECRMI_Tank_SendTankType bool SendTankType ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & tankType) PN_OVERRIDE

#define DEFRMI_Tank_SendTankType(DerivedClass) bool DerivedClass::SendTankType ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & tankType)
#define CALL_Tank_SendTankType SendTankType ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & tankType)
#define PARAM_Tank_SendTankType ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & tankType)
               
		virtual bool SendTankHealthUpdated ( ::Proud::HostID, ::Proud::RmiContext& , const float & , const float & )		{ 
			return false;
		} 

#define DECRMI_Tank_SendTankHealthUpdated bool SendTankHealthUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & currentHealth, const float & maxHealth) PN_OVERRIDE

#define DEFRMI_Tank_SendTankHealthUpdated(DerivedClass) bool DerivedClass::SendTankHealthUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & currentHealth, const float & maxHealth)
#define CALL_Tank_SendTankHealthUpdated SendTankHealthUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & currentHealth, const float & maxHealth)
#define PARAM_Tank_SendTankHealthUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & currentHealth, const float & maxHealth)
               
		virtual bool SendTankDestroyed ( ::Proud::HostID, ::Proud::RmiContext& , const int & )		{ 
			return false;
		} 

#define DECRMI_Tank_SendTankDestroyed bool SendTankDestroyed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & destroyedById) PN_OVERRIDE

#define DEFRMI_Tank_SendTankDestroyed(DerivedClass) bool DerivedClass::SendTankDestroyed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & destroyedById)
#define CALL_Tank_SendTankDestroyed SendTankDestroyed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & destroyedById)
#define PARAM_Tank_SendTankDestroyed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & destroyedById)
               
		virtual bool SendTankSpawned ( ::Proud::HostID, ::Proud::RmiContext& , const float & , const float & , const float & , const int & , const float & )		{ 
			return false;
		} 

#define DECRMI_Tank_SendTankSpawned bool SendTankSpawned ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth) PN_OVERRIDE

#define DEFRMI_Tank_SendTankSpawned(DerivedClass) bool DerivedClass::SendTankSpawned ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth)
#define CALL_Tank_SendTankSpawned SendTankSpawned ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth)
#define PARAM_Tank_SendTankSpawned ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth)
               
		virtual bool OnPlayerJoined ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const float & , const float & , const int & )		{ 
			return false;
		} 

#define DECRMI_Tank_OnPlayerJoined bool OnPlayerJoined ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const int & tankType) PN_OVERRIDE

#define DEFRMI_Tank_OnPlayerJoined(DerivedClass) bool DerivedClass::OnPlayerJoined ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const int & tankType)
#define CALL_Tank_OnPlayerJoined OnPlayerJoined ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const int & tankType)
#define PARAM_Tank_OnPlayerJoined ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const int & tankType)
               
		virtual bool OnPlayerLeft ( ::Proud::HostID, ::Proud::RmiContext& , const int & )		{ 
			return false;
		} 

#define DECRMI_Tank_OnPlayerLeft bool OnPlayerLeft ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId) PN_OVERRIDE

#define DEFRMI_Tank_OnPlayerLeft(DerivedClass) bool DerivedClass::OnPlayerLeft ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId)
#define CALL_Tank_OnPlayerLeft OnPlayerLeft ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId)
#define PARAM_Tank_OnPlayerLeft ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId)
               
		virtual bool OnTankPositionUpdated ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const float & , const float & , const float & )		{ 
			return false;
		} 

#define DECRMI_Tank_OnTankPositionUpdated bool OnTankPositionUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const float & direction) PN_OVERRIDE

#define DEFRMI_Tank_OnTankPositionUpdated(DerivedClass) bool DerivedClass::OnTankPositionUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const float & direction)
#define CALL_Tank_OnTankPositionUpdated OnTankPositionUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const float & direction)
#define PARAM_Tank_OnTankPositionUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const float & direction)
               
		virtual bool OnTankHealthUpdated ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const float & , const float & )		{ 
			return false;
		} 

#define DECRMI_Tank_OnTankHealthUpdated bool OnTankHealthUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & currentHealth, const float & maxHealth) PN_OVERRIDE

#define DEFRMI_Tank_OnTankHealthUpdated(DerivedClass) bool DerivedClass::OnTankHealthUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & currentHealth, const float & maxHealth)
#define CALL_Tank_OnTankHealthUpdated OnTankHealthUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & currentHealth, const float & maxHealth)
#define PARAM_Tank_OnTankHealthUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & currentHealth, const float & maxHealth)
               
		virtual bool OnTankDestroyed ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const int & )		{ 
			return false;
		} 

#define DECRMI_Tank_OnTankDestroyed bool OnTankDestroyed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const int & destroyedById) PN_OVERRIDE

#define DEFRMI_Tank_OnTankDestroyed(DerivedClass) bool DerivedClass::OnTankDestroyed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const int & destroyedById)
#define CALL_Tank_OnTankDestroyed OnTankDestroyed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const int & destroyedById)
#define PARAM_Tank_OnTankDestroyed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const int & destroyedById)
               
		virtual bool OnTankSpawned ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const float & , const float & , const float & , const int & , const float & )		{ 
			return false;
		} 

#define DECRMI_Tank_OnTankSpawned bool OnTankSpawned ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth) PN_OVERRIDE

#define DEFRMI_Tank_OnTankSpawned(DerivedClass) bool DerivedClass::OnTankSpawned ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth)
#define CALL_Tank_OnTankSpawned OnTankSpawned ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth)
#define PARAM_Tank_OnTankSpawned ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth)
               
		virtual bool OnSpawnBullet ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const int & , const float & , const float & , const float & , const float & , const float & , const float & , const float & )		{ 
			return false;
		} 

#define DECRMI_Tank_OnSpawnBullet bool OnSpawnBullet ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const int & shooterId, const float & posX, const float & posY, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ) PN_OVERRIDE

#define DEFRMI_Tank_OnSpawnBullet(DerivedClass) bool DerivedClass::OnSpawnBullet ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const int & shooterId, const float & posX, const float & posY, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ)
#define CALL_Tank_OnSpawnBullet OnSpawnBullet ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const int & shooterId, const float & posX, const float & posY, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ)
#define PARAM_Tank_OnSpawnBullet ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const int & shooterId, const float & posX, const float & posY, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ)
               
		virtual bool P2PMessage ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & )		{ 
			return false;
		} 

#define DECRMI_Tank_P2PMessage bool P2PMessage ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & message) PN_OVERRIDE

#define DEFRMI_Tank_P2PMessage(DerivedClass) bool DerivedClass::P2PMessage ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & message)
#define CALL_Tank_P2PMessage P2PMessage ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & message)
#define PARAM_Tank_P2PMessage ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & message)
 
		virtual bool ProcessReceivedMessage(::Proud::CReceivedMessage &pa, void* hostTag) PN_OVERRIDE;
		static const PNTCHAR* RmiName_SendMove;
		static const PNTCHAR* RmiName_SendFire;
		static const PNTCHAR* RmiName_SendTankType;
		static const PNTCHAR* RmiName_SendTankHealthUpdated;
		static const PNTCHAR* RmiName_SendTankDestroyed;
		static const PNTCHAR* RmiName_SendTankSpawned;
		static const PNTCHAR* RmiName_OnPlayerJoined;
		static const PNTCHAR* RmiName_OnPlayerLeft;
		static const PNTCHAR* RmiName_OnTankPositionUpdated;
		static const PNTCHAR* RmiName_OnTankHealthUpdated;
		static const PNTCHAR* RmiName_OnTankDestroyed;
		static const PNTCHAR* RmiName_OnTankSpawned;
		static const PNTCHAR* RmiName_OnSpawnBullet;
		static const PNTCHAR* RmiName_P2PMessage;
		static const PNTCHAR* RmiName_First;
		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; }
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

#ifdef SUPPORTS_CPP11 
	
	class StubFunctional : public Stub 
	{
	public:
               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const float & , const float & , const float & ) > SendMove_Function;
		virtual bool SendMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & posX, const float & posY, const float & direction) 
		{ 
			if (SendMove_Function==nullptr) 
				return true; 
			return SendMove_Function(remote,rmiContext, posX, posY, direction); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const float & , const float & , const float & , const float & , const float & ) > SendFire_Function;
		virtual bool SendFire ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & shooterId, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ) 
		{ 
			if (SendFire_Function==nullptr) 
				return true; 
			return SendFire_Function(remote,rmiContext, shooterId, direction, launchForce, fireX, fireY, fireZ); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & ) > SendTankType_Function;
		virtual bool SendTankType ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & tankType) 
		{ 
			if (SendTankType_Function==nullptr) 
				return true; 
			return SendTankType_Function(remote,rmiContext, tankType); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const float & , const float & ) > SendTankHealthUpdated_Function;
		virtual bool SendTankHealthUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & currentHealth, const float & maxHealth) 
		{ 
			if (SendTankHealthUpdated_Function==nullptr) 
				return true; 
			return SendTankHealthUpdated_Function(remote,rmiContext, currentHealth, maxHealth); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & ) > SendTankDestroyed_Function;
		virtual bool SendTankDestroyed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & destroyedById) 
		{ 
			if (SendTankDestroyed_Function==nullptr) 
				return true; 
			return SendTankDestroyed_Function(remote,rmiContext, destroyedById); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const float & , const float & , const float & , const int & , const float & ) > SendTankSpawned_Function;
		virtual bool SendTankSpawned ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth) 
		{ 
			if (SendTankSpawned_Function==nullptr) 
				return true; 
			return SendTankSpawned_Function(remote,rmiContext, posX, posY, direction, tankType, initialHealth); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const float & , const float & , const int & ) > OnPlayerJoined_Function;
		virtual bool OnPlayerJoined ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const int & tankType) 
		{ 
			if (OnPlayerJoined_Function==nullptr) 
				return true; 
			return OnPlayerJoined_Function(remote,rmiContext, clientId, posX, posY, tankType); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & ) > OnPlayerLeft_Function;
		virtual bool OnPlayerLeft ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId) 
		{ 
			if (OnPlayerLeft_Function==nullptr) 
				return true; 
			return OnPlayerLeft_Function(remote,rmiContext, clientId); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const float & , const float & , const float & ) > OnTankPositionUpdated_Function;
		virtual bool OnTankPositionUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const float & direction) 
		{ 
			if (OnTankPositionUpdated_Function==nullptr) 
				return true; 
			return OnTankPositionUpdated_Function(remote,rmiContext, clientId, posX, posY, direction); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const float & , const float & ) > OnTankHealthUpdated_Function;
		virtual bool OnTankHealthUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & currentHealth, const float & maxHealth) 
		{ 
			if (OnTankHealthUpdated_Function==nullptr) 
				return true; 
			return OnTankHealthUpdated_Function(remote,rmiContext, clientId, currentHealth, maxHealth); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const int & ) > OnTankDestroyed_Function;
		virtual bool OnTankDestroyed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const int & destroyedById) 
		{ 
			if (OnTankDestroyed_Function==nullptr) 
				return true; 
			return OnTankDestroyed_Function(remote,rmiContext, clientId, destroyedById); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const float & , const float & , const float & , const int & , const float & ) > OnTankSpawned_Function;
		virtual bool OnTankSpawned ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth) 
		{ 
			if (OnTankSpawned_Function==nullptr) 
				return true; 
			return OnTankSpawned_Function(remote,rmiContext, clientId, posX, posY, direction, tankType, initialHealth); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const int & , const int & , const float & , const float & , const float & , const float & , const float & , const float & , const float & ) > OnSpawnBullet_Function;
		virtual bool OnSpawnBullet ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const int & shooterId, const float & posX, const float & posY, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ) 
		{ 
			if (OnSpawnBullet_Function==nullptr) 
				return true; 
			return OnSpawnBullet_Function(remote,rmiContext, clientId, shooterId, posX, posY, direction, launchForce, fireX, fireY, fireZ); 
		}

               
		std::function< bool ( ::Proud::HostID, ::Proud::RmiContext& , const Proud::String & ) > P2PMessage_Function;
		virtual bool P2PMessage ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & message) 
		{ 
			if (P2PMessage_Function==nullptr) 
				return true; 
			return P2PMessage_Function(remote,rmiContext, message); 
		}

	};
#endif

}


