



  
// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

#pragma once


#include "Tank_common.h"

namespace Tank {


	class Proxy : public ::Proud::IRmiProxy
	{
	public:
	virtual bool SendMove ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & posX, const float & posY, const float & direction) PN_SEALED; 
	virtual bool SendMove ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const float & posX, const float & posY, const float & direction)   PN_SEALED;  
	virtual bool SendFire ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & shooterId, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ) PN_SEALED; 
	virtual bool SendFire ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & shooterId, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ)   PN_SEALED;  
	virtual bool SendTankType ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & tankType) PN_SEALED; 
	virtual bool SendTankType ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & tankType)   PN_SEALED;  
	virtual bool SendTankHealthUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & currentHealth, const float & maxHealth) PN_SEALED; 
	virtual bool SendTankHealthUpdated ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const float & currentHealth, const float & maxHealth)   PN_SEALED;  
	virtual bool SendTankDestroyed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & destroyedById) PN_SEALED; 
	virtual bool SendTankDestroyed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & destroyedById)   PN_SEALED;  
	virtual bool SendTankSpawned ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth) PN_SEALED; 
	virtual bool SendTankSpawned ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth)   PN_SEALED;  
	virtual bool OnPlayerJoined ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const int & tankType) PN_SEALED; 
	virtual bool OnPlayerJoined ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & clientId, const float & posX, const float & posY, const int & tankType)   PN_SEALED;  
	virtual bool OnPlayerLeft ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId) PN_SEALED; 
	virtual bool OnPlayerLeft ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & clientId)   PN_SEALED;  
	virtual bool OnTankPositionUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const float & direction) PN_SEALED; 
	virtual bool OnTankPositionUpdated ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & clientId, const float & posX, const float & posY, const float & direction)   PN_SEALED;  
	virtual bool OnTankHealthUpdated ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & currentHealth, const float & maxHealth) PN_SEALED; 
	virtual bool OnTankHealthUpdated ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & clientId, const float & currentHealth, const float & maxHealth)   PN_SEALED;  
	virtual bool OnTankDestroyed ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const int & destroyedById) PN_SEALED; 
	virtual bool OnTankDestroyed ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & clientId, const int & destroyedById)   PN_SEALED;  
	virtual bool OnTankSpawned ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth) PN_SEALED; 
	virtual bool OnTankSpawned ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & clientId, const float & posX, const float & posY, const float & direction, const int & tankType, const float & initialHealth)   PN_SEALED;  
	virtual bool OnSpawnBullet ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const int & clientId, const int & shooterId, const float & posX, const float & posY, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ) PN_SEALED; 
	virtual bool OnSpawnBullet ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const int & clientId, const int & shooterId, const float & posX, const float & posY, const float & direction, const float & launchForce, const float & fireX, const float & fireY, const float & fireZ)   PN_SEALED;  
	virtual bool P2PMessage ( ::Proud::HostID remote, ::Proud::RmiContext& rmiContext , const Proud::String & message) PN_SEALED; 
	virtual bool P2PMessage ( ::Proud::HostID *remotes, int remoteCount, ::Proud::RmiContext &rmiContext, const Proud::String & message)   PN_SEALED;  
static const PNTCHAR* RmiName_SendMove;
static const PNTCHAR* RmiName_SendFire;
static const PNTCHAR* RmiName_SendTankType;
static const PNTCHAR* RmiName_SendTankHealthUpdated;
static const PNTCHAR* RmiName_SendTankDestroyed;
static const PNTCHAR* RmiName_SendTankSpawned;
static const PNTCHAR* RmiName_OnPlayerJoined;
static const PNTCHAR* RmiName_OnPlayerLeft;
static const PNTCHAR* RmiName_OnTankPositionUpdated;
static const PNTCHAR* RmiName_OnTankHealthUpdated;
static const PNTCHAR* RmiName_OnTankDestroyed;
static const PNTCHAR* RmiName_OnTankSpawned;
static const PNTCHAR* RmiName_OnSpawnBullet;
static const PNTCHAR* RmiName_P2PMessage;
static const PNTCHAR* RmiName_First;
		Proxy()
		{
			if(m_signature != 1)
				::Proud::ShowUserMisuseError(::Proud::ProxyBadSignatureErrorText);
		}

		virtual ::Proud::RmiID* GetRmiIDList() PN_OVERRIDE { return g_RmiIDList; } 
		virtual int GetRmiIDListCount() PN_OVERRIDE { return g_RmiIDListCount; }
	};

}



