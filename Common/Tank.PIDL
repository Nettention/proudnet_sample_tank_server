// Tank Game RMI Function Definitions
// Defines functions used for communication between client and server.

rename cs(Proud::String, System.String);

global Tank 2000 // Client-Server and Server-Client RMI, first message ID = 2000
{
    //====================================================================
    // RMI functions sent from Client to Server
    //====================================================================
    
    // Movement and Action related functions
    SendMove(
        [in] float posX,     // X coordinate to move to
        [in] float posY,     // Y coordinate to move to
        [in] float direction // Tank direction (angle)
    ); // Request tank position and direction movement

    SendFire(
        [in] int shooterId,     // ID of the player who fired
        [in] float direction,   // Fire direction (angle)
        [in] float launchForce, // Launch force (intensity)
        [in] float fireX,       // Fire position X coordinate
        [in] float fireY,       // Fire position Y coordinate
        [in] float fireZ        // Fire position Z coordinate
    ); // Request tank projectile fire
    
    // Tank status and property related functions
    SendTankType(
        [in] int tankType    // Tank type number (0-3: each tank type)
    ); // Notify server of tank type selected by client

    SendTankHealthUpdated(
        [in] float currentHealth, // Current health
        [in] float maxHealth      // Maximum health
    ); // Request tank health status update

    SendTankDestroyed(
        [in] int destroyedById // Player ID who destroyed the tank (0: destroyed by environment)
    ); // Tank destruction event notification

    SendTankSpawned(
        [in] float posX,         // Spawn position X coordinate
        [in] float posY,         // Spawn position Y coordinate
        [in] float direction,    // Initial direction (angle)
        [in] int tankType,       // Tank type
        [in] float initialHealth // Initial health
    ); // Tank creation/respawn request
    
    //====================================================================
    // RMI functions sent from Server to Client
    //====================================================================
    
    // Player management related functions
    OnPlayerJoined(
        [in] int clientId,    // Joined player ID
        [in] float posX,      // Position X coordinate
        [in] float posY,      // Position Y coordinate
        [in] int tankType     // Tank type
    ); // Notify that a new player has joined the game

    OnPlayerLeft(
        [in] int clientId     // Left player ID
    ); // Notify that a player has left the game
    
    // Tank status update related functions
    OnTankPositionUpdated(
        [in] int clientId,    // Target player ID
        [in] float posX,      // Updated X coordinate
        [in] float posY,      // Updated Y coordinate
        [in] float direction  // Updated direction (angle)
    ); // Tank position and direction update notification

    OnTankHealthUpdated(
        [in] int clientId,        // Target player ID
        [in] float currentHealth, // Current health
        [in] float maxHealth      // Maximum health
    ); // Tank health status change notification

    OnTankDestroyed(
        [in] int clientId,     // Player ID of destroyed tank
        [in] int destroyedById // Player ID who destroyed the tank (0: destroyed by environment)
    ); // Tank destruction event notification

    OnTankSpawned(
        [in] int clientId,       // Target player ID
        [in] float posX,         // Spawn position X coordinate
        [in] float posY,         // Spawn position Y coordinate
        [in] float direction,    // Initial direction (angle)
        [in] int tankType,       // Tank type
        [in] float initialHealth // Initial health
    ); // Tank creation/respawn notification
    
    // Game event related functions
    OnSpawnBullet(
        [in] int clientId,       // Player ID who fired
        [in] int shooterId,      // Shooter ID
        [in] float posX,         // Fire position X coordinate
        [in] float posY,         // Fire position Y coordinate
        [in] float direction,    // Fire direction (angle)
        [in] float launchForce,  // Launch force (intensity)
        [in] float fireX,        // Exact fire position X coordinate
        [in] float fireY,        // Exact fire position Y coordinate
        [in] float fireZ         // Exact fire position Z coordinate
    ); // Projectile fire event notification
    
    //====================================================================
    // P2P Communication related functions
    //====================================================================
    P2PMessage(
        [in] Proud::String message  // Message to send
    ); // Send P2P message to other clients
} 